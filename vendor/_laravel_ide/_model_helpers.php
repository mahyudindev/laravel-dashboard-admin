<?php

namespace App\Models {

	/**
	 * App\Models\User
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $remember_token
	 * @property string $role
	 * @property string $password
	 * @property \Illuminate\Support\Carbon|null $email_verified_at
	 * @property string $email
	 * @property string $name
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
	 * @property-read int|null $notifications_count
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereEmail($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereEmailVerifiedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User wherePassword($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereRole($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereRememberToken($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder|User newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder|User query()
	 * @method static \Illuminate\Database\Eloquent\Builder|User select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder|User selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder|User fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder|User addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder|User useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder|User forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder|User ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder|User mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder|User addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder|User groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder|User havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder|User skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder|User lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder|User sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder|User beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder|User afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static object|null find(int|string $id, array|string $columns)
	 * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder|User setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder|User addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder|User mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder|User useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder|User clone()
	 * @method static \Illuminate\Database\Eloquent\Builder|User cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder|User cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder|User dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder|User dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder|User wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereTodayOrBefore(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAfterToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder|User orWhereTodayOrAfter(array|string $columns, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection<int,mixed> lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection<int,mixed> lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection<int,mixed> lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed|null first(array|string $columns)
	 * @method static mixed firstOrFail(array|string $columns, string|null $message)
	 * @method static mixed sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder|User tap(callable $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder|User|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Database\Eloquent\Builder|User|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class User extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}